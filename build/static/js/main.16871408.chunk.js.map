{"version":3,"sources":["Currencybox.js","App.js","index.js"],"names":["Currencybox","props","listcurrency","selectCurrency","onChangeCurrency","onChangeAmount","amount","type","className","value","onChange","map","option","key","url","App","toAmount","fromAmount","useState","setlistCurrency","fromCurrency","setfromCurrency","toCurrency","settoCurrency","setamount","amountFromCurrency","setamountFromCurrency","amountToCurrency","setamountToCurrency","exchangeRate","setexchangeRate","useEffect","fetch","then","res","json","data","nextcurrency","Object","keys","rates","base","currentRate","parseFloat","toFixed","e","target","onClick","preventDefault","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAEe,SAASA,EAAYC,GAAQ,IAE1CC,EAKED,EALFC,aACAC,EAIEF,EAJFE,eACAC,EAGEH,EAHFG,iBACAC,EAEEJ,EAFFI,eACAC,EACEL,EADFK,OAGA,OAGE,6BACE,2BAAOC,KAAO,SAASC,UAAU,QAAQC,MAASH,EAAQI,SAAYL,IACtE,yBAAKG,UAAY,UACf,4BAAQC,MAASN,EAAgBO,SAAWN,GAC3CF,EAAaS,KAAI,SAAAC,GAAM,OACtB,4BAAQC,IAAOD,EACfH,MAAQG,GADR,IACkBA,S,WCftBE,EAAK,yCAqGIC,MAnGf,WAAe,IAcTC,EAAUC,EAdD,EAK2BC,mBAAS,IALpC,mBAKNhB,EALM,KAKQiB,EALR,OAM0BD,qBAN1B,mBAMNE,EANM,KAMQC,EANR,OAOuBH,qBAPvB,mBAONI,EAPM,KAOMC,EAPN,OAQeL,mBAAS,GARxB,mBAQNZ,EARM,KAQEkB,EARF,OASuCN,oBAAS,GAThD,mBASNO,EATM,KAScC,EATd,OAUmCR,oBAAS,GAV5C,mBAUNS,EAVM,KAUYC,EAVZ,OAW2BV,qBAX3B,mBAWNW,EAXM,KAWQC,EAXR,KAeVL,GACDR,EAAaX,EACbU,EAAWV,EAASuB,IAGpBb,EAAUV,EACVW,EAAYX,EAASuB,GAKvBE,qBAAU,WACRC,MAAMlB,GACHmB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAMC,EAAeC,OAAOC,KAAKH,EAAKI,OAAO,GAC7CrB,EAAgB,CAACiB,EAAKK,MAAP,mBAAgBH,OAAOC,KAAKH,EAAKI,UAChDnB,EAAgBe,EAAKK,MACrBlB,EAAcc,GACdP,EAAgBM,EAAKI,MAAMH,SAG9B,IAKHN,qBAAU,WACW,MAAhBX,GAAsC,MAAdE,GACzBU,MAAM,GAAD,OAAIlB,EAAJ,iBAAgBM,EAAhB,oBAAwCE,IAC1CW,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIN,EAAgBM,EAAKI,MAAMlB,SAE5C,CAACF,EAAaE,IAYjB,IAOIoB,EAAW,UAAMC,WAAW1B,GAAY2B,QAAQ,GAArC,YAA2CxB,EAA3C,cAA6DuB,WAAW3B,GAAU4B,QAAQ,GAA1F,YAAgGtB,GAC/G,OAEE,oCACE,yBAAKd,UAAU,eAAc,oDAC7B,yBAAKA,UAAU,eACd,yBAAKA,UAAU,QAAf,IAAuB,2BAAG,6DAC7B,kBAACR,EAAD,CACAE,aAAgBA,EAChBC,eAAkBiB,EAClBhB,iBAAoB,SAAAyC,GAAC,OAAIxB,EAAgBwB,EAAEC,OAAOrC,QAElDJ,eA7BF,SAA0BwC,GACxBrB,EAAUqB,EAAEC,OAAOrC,OACnBiB,GAAsB,IA4BtBpB,OAAUW,IAGV,yBAAKT,UAAU,oBAAmB,kBAAC,IAAD,CAAeuC,QAvBhC,SAACF,GAClBA,EAAEG,iBACFzB,EAAcH,GACdC,EAAgBC,GAChBI,EAAsBC,GACtBC,EAAoBH,IAkBkDjB,UAAU,gFAChF,kBAACR,EAAD,CACAE,aAAeA,EACfC,eAAiBmB,EACjBlB,iBAAoB,SAAAyC,GAAC,OAAItB,EAAcsB,EAAEC,OAAOrC,QAChDJ,eAjCF,SAAwBwC,GACtBrB,EAAUqB,EAAEC,OAAOrC,OACnBiB,GAAsB,IAgCtBpB,OAASU,IAEL,2BAAI0B,MC9FZO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.16871408.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Currencybox(props) {\nconst{\n  listcurrency,\n  selectCurrency,\n  onChangeCurrency,\n  onChangeAmount,\n  amount \n} = props\n\n  return (\n\n    \n    <div>\n      <input type = \"number\" className=\"input\" value = {amount} onChange = {onChangeAmount} />\n      <div className = \"from-1\">     \n        <select value = {selectCurrency} onChange= {onChangeCurrency}>\n        {listcurrency.map(option => (\n          <option key = {option}\n          value ={option}> {option}\n          </option>\n        ))}        \n        </select>\n        </div>\n        \n    </div>\n  )\n}\n","import React, { useEffect , useState } from 'react';\nimport './App.css';\nimport Currencybox from './Currencybox';\nimport { BsArrowUpDown } from \"react-icons/bs\";\n\nconst url =\"https://api.exchangeratesapi.io/latest\";\n\nfunction App() {\n\n  // usestate to list the names in the dropdown\n  // it returns an array of options\n  // first is the current currency and second is the object or function that allows to set this currency\n  const [listcurrency, setlistCurrency] = useState([])\n  const [fromCurrency, setfromCurrency] =useState()\n  const [toCurrency, settoCurrency] = useState()\n  const [amount, setamount] = useState(1)\n  const [amountFromCurrency, setamountFromCurrency] = useState(true)\n  const [amountToCurrency, setamountToCurrency] = useState(true)\n  const [exchangeRate, setexchangeRate] = useState() \n\n\n  let toAmount, fromAmount \n  if(amountFromCurrency){\n    fromAmount = amount\n    toAmount = amount * exchangeRate\n  }\n  else{\n    toAmount =amount\n    fromAmount= amount / exchangeRate\n  }\n   // here the useEffect takes two parameter: first is the function and second\n  // it is called the first time when this application is called\n  \n  useEffect(() => {\n    fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        const nextcurrency = Object.keys(data.rates)[0]\n        setlistCurrency([data.base, ...Object.keys(data.rates)])\n        setfromCurrency(data.base)\n        settoCurrency(nextcurrency)\n        setexchangeRate(data.rates[nextcurrency])\n\n      })\n  } ,[])\n\n\n  // whenever fromcurrency or tocurrency changes do this\n\n  useEffect(() => {\n    if(fromCurrency != null && toCurrency != null){\n      fetch(`${url}?base=${fromCurrency}&symbols=${toCurrency}`)\n        .then(res => res.json())\n        .then(data => setexchangeRate(data.rates[toCurrency]))\n    }\n  }, [fromCurrency,toCurrency])\n\n  function fromAmountChange(e){\n    setamount(e.target.value)\n    setamountFromCurrency(true)\n  }\n\n  function toAmountChange(e){\n    setamount(e.target.value)\n    setamountFromCurrency(false)\n  }\n\n  const handleSwap = (e) => {\n    e.preventDefault()\n    settoCurrency(fromCurrency)\n    setfromCurrency(toCurrency)\n    setamountFromCurrency(amountToCurrency)\n    setamountToCurrency(amountFromCurrency)\n  }\n  let currentRate = `${parseFloat(fromAmount).toFixed(2)} ${fromCurrency} = ${parseFloat(toAmount).toFixed(2)} ${toCurrency}`\n  return (\n    //  need Fragment to run the code : <> and </>\n    <>\n      <div className=\"container-1\"><h1> Currency Converter</h1></div>\n      <div className=\"container-2\">\n       <div className=\"text\"> <p><h2>Enter the amount to convert</h2></p></div>\n    <Currencybox \n    listcurrency = {listcurrency} \n    selectCurrency = {fromCurrency}\n    onChangeCurrency = {e => setfromCurrency(e.target.value)}\n    \n    onChangeAmount = {fromAmountChange}\n    amount = {fromAmount}\n    />\n    {/* <div className=\"equals\"><h2>  = </h2></div> */}\n    <div className='w-full my-2 py-2'><BsArrowUpDown onClick={handleSwap} className='equals text-white hover:text-gray-900 rounded-full h-12 w-12 bg-green-600 '/></div>\n    <Currencybox\n    listcurrency ={listcurrency}\n    selectCurrency= {toCurrency}\n    onChangeCurrency = {e => settoCurrency(e.target.value)}\n    onChangeAmount = {toAmountChange}\n    amount ={toAmount}\n    />\n        <p>{currentRate}</p>\n    </div>\n\n    </>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}