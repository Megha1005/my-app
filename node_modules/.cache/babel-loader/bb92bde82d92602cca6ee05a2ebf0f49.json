{"ast":null,"code":"var _jsxFileName = \"/home/g1994/Desktop/SFSU/Mintbean_demo/react-currency_converter/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Currencybox from './Currencybox';\nconst url = \"https://api.exchangeratesapi.io/latest\";\n\nfunction App() {\n  // usestate to list the names in the dropdown\n  // it returns an array of options\n  // first is the current currency and second is the object or function that allows to set this currency\n  const [listcurrency, setlistCurrency] = useState([]);\n  const [fromCurrency, setfromCurrency] = useState();\n  const [toCurrency, settoCurrency] = useState();\n  const [amount, setamount] = useState(1);\n  const [amountFromCurrency, setamountFromCurrency] = useState(true);\n  const [exchangeRate, setexchangeRate] = useState();\n  let toAmount, fromAmount;\n\n  if (amountFromCurrency) {\n    fromAmount = amount;\n    toAmount = amount * exchangeRate;\n  } else {\n    toAmount = amount;\n    fromAmount = amount / exchangeRate;\n  } // here the useEffect takes two parameter: first is the function and second\n  // it is called the first time when this application is called\n\n\n  useEffect(() => {\n    fetch(url).then(res => res.json()).then(data => {\n      const nextcurrency = Object.keys(data.rates)[0];\n      setlistCurrency([data.base, ...Object.keys(data.rates)]);\n      setfromCurrency(data.base);\n      settoCurrency(nextcurrency);\n      setexchangeRate(data.rates[nextcurrency]);\n    });\n  }, []); // whenever fromcurrency or tocurrency changes do this\n\n  useEffect(() => {\n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${url}?base=${fromCurrency}&symbols=${toCurrency}`).then(res => res.json()).then(data => setexchangeRate(data.rates[toCurrency]));\n    }\n  }, [fromCurrency, toCurrency]);\n\n  function fromAmountChange(e) {\n    setamount(e.target.value);\n    setamountFromCurrency(true);\n  }\n\n  function toAmountChange(e) {\n    setamount(e.target.value);\n    setamountFromCurrency(false);\n  }\n\n  return (\n    /*#__PURE__*/\n    //  need Fragment to run the code : <> and </>\n    React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 36\n      }\n    }, \" Currency Converter\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 12\n      }\n    }, \"Enter the amount to convert\")), /*#__PURE__*/React.createElement(Currencybox, {\n      listcurrency: listcurrency,\n      selectCurrency: fromCurrency,\n      onChangeCurrency: e => setfromCurrency(e.target.value),\n      onChangeAmount: fromAmountChange,\n      amount: fromAmount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"equals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }\n    }, \" EQUALS = \"), /*#__PURE__*/React.createElement(Currencybox, {\n      listcurrency: listcurrency,\n      selectCurrency: toCurrency,\n      onChangeCurrency: e => settoCurrency(e.target.value),\n      onChangeAmount: toAmountChange,\n      amount: toAmount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }\n    })))\n  );\n}\n\nexport default App;","map":{"version":3,"sources":["/home/g1994/Desktop/SFSU/Mintbean_demo/react-currency_converter/src/App.js"],"names":["React","useEffect","useState","Currencybox","url","App","listcurrency","setlistCurrency","fromCurrency","setfromCurrency","toCurrency","settoCurrency","amount","setamount","amountFromCurrency","setamountFromCurrency","exchangeRate","setexchangeRate","toAmount","fromAmount","fetch","then","res","json","data","nextcurrency","Object","keys","rates","base","fromAmountChange","e","target","value","toAmountChange"],"mappings":"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","sourcesContent":["import React, { useEffect , useState } from 'react';\nimport './App.css';\nimport Currencybox from './Currencybox';\n\nconst url =\"https://api.exchangeratesapi.io/latest\";\n\nfunction App() {\n\n  // usestate to list the names in the dropdown\n  // it returns an array of options\n  // first is the current currency and second is the object or function that allows to set this currency\n  const [listcurrency, setlistCurrency] = useState([])\n  const [fromCurrency, setfromCurrency] =useState()\n  const [toCurrency, settoCurrency] = useState()\n  const [amount, setamount] = useState(1)\n  const [amountFromCurrency, setamountFromCurrency] = useState(true)\n  const [exchangeRate, setexchangeRate] = useState() \n\n\n  let toAmount, fromAmount \n  if(amountFromCurrency){\n    fromAmount = amount\n    toAmount = amount * exchangeRate\n  }\n  else{\n    toAmount =amount\n    fromAmount= amount / exchangeRate\n  }\n   // here the useEffect takes two parameter: first is the function and second\n  // it is called the first time when this application is called\n  \n  useEffect(() => {\n    fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        const nextcurrency = Object.keys(data.rates)[0]\n        setlistCurrency([data.base, ...Object.keys(data.rates)])\n        setfromCurrency(data.base)\n        settoCurrency(nextcurrency)\n        setexchangeRate(data.rates[nextcurrency])\n\n      })\n  } ,[])\n\n\n  // whenever fromcurrency or tocurrency changes do this\n\n  useEffect(() => {\n    if(fromCurrency != null && toCurrency != null){\n      fetch(`${url}?base=${fromCurrency}&symbols=${toCurrency}`)\n        .then(res => res.json())\n        .then(data => setexchangeRate(data.rates[toCurrency]))\n    }\n  }, [fromCurrency,toCurrency])\n\n  function fromAmountChange(e){\n    setamount(e.target.value)\n    setamountFromCurrency(true)\n  }\n\n  function toAmountChange(e){\n    setamount(e.target.value)\n    setamountFromCurrency(false)\n  }\n\n  return (\n    //  need Fragment to run the code : <> and </>\n    <>\n    \n      <div className=\"container-1\"><h1> Currency Converter</h1></div>\n      <div className=\"container-2\">\n        <p><h2>Enter the amount to convert</h2></p>\n    <Currencybox \n    listcurrency = {listcurrency} \n    selectCurrency = {fromCurrency}\n    onChangeCurrency = {e => setfromCurrency(e.target.value)}\n    \n    onChangeAmount = {fromAmountChange}\n    amount = {fromAmount}\n    />\n    <div className=\"equals\"> EQUALS = </div>\n\n    <Currencybox\n    listcurrency ={listcurrency}\n    selectCurrency= {toCurrency}\n    onChangeCurrency = {e => settoCurrency(e.target.value)}\n    onChangeAmount = {toAmountChange}\n    amount ={toAmount}\n    />\n    </div>\n    </>\n\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}