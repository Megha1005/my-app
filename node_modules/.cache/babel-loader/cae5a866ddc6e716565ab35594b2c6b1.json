{"ast":null,"code":"var _jsxFileName = \"/home/g1994/Desktop/SFSU/Mintbean_demo/react-currency_converter/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Currencybox from './Currencybox';\nimport { BsArrowUpDown } from \"react-icons/bs\";\nconst url = \"https://api.exchangeratesapi.io/latest\";\n\nfunction App() {\n  // usestate to list the names in the dropdown\n  // it returns an array of options\n  // first is the current currency and second is the object or function that allows to set this currency\n  const [listcurrency, setlistCurrency] = useState([]);\n  const [fromCurrency, setfromCurrency] = useState();\n  const [toCurrency, settoCurrency] = useState();\n  const [amount, setamount] = useState(1);\n  const [amountFromCurrency, setamountFromCurrency] = useState(true);\n  const [amountToCurrency, setamountToCurrency] = useState(true);\n  const [exchangeRate, setexchangeRate] = useState();\n  let toAmount, fromAmount;\n\n  if (amountFromCurrency) {\n    fromAmount = amount;\n    toAmount = amount * exchangeRate;\n  } else {\n    toAmount = amount;\n    fromAmount = amount / exchangeRate;\n  } // here the useEffect takes two parameter: first is the function and second\n  // it is called the first time when this application is called\n\n\n  useEffect(() => {\n    fetch(url).then(res => res.json()).then(data => {\n      const nextcurrency = Object.keys(data.rates)[0];\n      setlistCurrency([data.base, ...Object.keys(data.rates)]);\n      setfromCurrency(data.base);\n      settoCurrency(nextcurrency);\n      setexchangeRate(data.rates[nextcurrency]);\n    });\n  }, []); // whenever fromcurrency or tocurrency changes do this\n\n  useEffect(() => {\n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${url}?base=${fromCurrency}&symbols=${toCurrency}`).then(res => res.json()).then(data => setexchangeRate(data.rates[toCurrency]));\n    }\n  }, [fromCurrency, toCurrency]);\n\n  function fromAmountChange(e) {\n    setamount(e.target.value);\n    setamountFromCurrency(true);\n  }\n\n  function toAmountChange(e) {\n    setamount(e.target.value);\n    setamountFromCurrency(false);\n  }\n\n  const handleSwap = e => {\n    e.preventDefault();\n    settoCurrency(fromCurrency);\n    setfromCurrency(toCurrency);\n    setamountFromCurrency(amountToCurrency);\n    setamountToCurrency(amountFromCurrency);\n  };\n\n  let currentRate = `${parseFloat(fromAmount).toFixed(2)} ${fromCurrency} = ${parseFloat(toAmount).toFixed(2)} ${toCurrency}`;\n  return (\n    /*#__PURE__*/\n    //  need Fragment to run the code : <> and </>\n    React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 36\n      }\n    }, \" Currency Converter\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 8\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 34\n      }\n    }, \"Enter the amount to convert\"))), /*#__PURE__*/React.createElement(Currencybox, {\n      listcurrency: listcurrency,\n      selectCurrency: fromCurrency,\n      onChangeCurrency: e => setfromCurrency(e.target.value),\n      onChangeAmount: fromAmountChange,\n      amount: fromAmount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"w-full my-2 py-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(BsArrowUpDown, {\n      onClick: handleSwap,\n      className: \"equals text-white hover:text-gray-900 rounded-full h-12 w-12 bg-green-600 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 39\n      }\n    })), /*#__PURE__*/React.createElement(Currencybox, {\n      listcurrency: listcurrency,\n      selectCurrency: toCurrency,\n      onChangeCurrency: e => settoCurrency(e.target.value),\n      onChangeAmount: toAmountChange,\n      amount: toAmount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 5\n      }\n    }, currentRate))\n  );\n}\n\nexport default App;","map":{"version":3,"sources":["/home/g1994/Desktop/SFSU/Mintbean_demo/react-currency_converter/src/App.js"],"names":["React","useEffect","useState","Currencybox","BsArrowUpDown","url","App","listcurrency","setlistCurrency","fromCurrency","setfromCurrency","toCurrency","settoCurrency","amount","setamount","amountFromCurrency","setamountFromCurrency","amountToCurrency","setamountToCurrency","exchangeRate","setexchangeRate","toAmount","fromAmount","fetch","then","res","json","data","nextcurrency","Object","keys","rates","base","fromAmountChange","e","target","value","toAmountChange","handleSwap","preventDefault","currentRate","parseFloat","toFixed"],"mappings":"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","sourcesContent":["import React, { useEffect , useState } from 'react';\nimport './App.css';\nimport Currencybox from './Currencybox';\nimport { BsArrowUpDown } from \"react-icons/bs\";\n\nconst url =\"https://api.exchangeratesapi.io/latest\";\n\nfunction App() {\n\n  // usestate to list the names in the dropdown\n  // it returns an array of options\n  // first is the current currency and second is the object or function that allows to set this currency\n  const [listcurrency, setlistCurrency] = useState([])\n  const [fromCurrency, setfromCurrency] =useState()\n  const [toCurrency, settoCurrency] = useState()\n  const [amount, setamount] = useState(1)\n  const [amountFromCurrency, setamountFromCurrency] = useState(true)\n  const [amountToCurrency, setamountToCurrency] = useState(true)\n  const [exchangeRate, setexchangeRate] = useState() \n\n\n  let toAmount, fromAmount \n  if(amountFromCurrency){\n    fromAmount = amount\n    toAmount = amount * exchangeRate\n  }\n  else{\n    toAmount =amount\n    fromAmount= amount / exchangeRate\n  }\n   // here the useEffect takes two parameter: first is the function and second\n  // it is called the first time when this application is called\n  \n  useEffect(() => {\n    fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        const nextcurrency = Object.keys(data.rates)[0]\n        setlistCurrency([data.base, ...Object.keys(data.rates)])\n        setfromCurrency(data.base)\n        settoCurrency(nextcurrency)\n        setexchangeRate(data.rates[nextcurrency])\n\n      })\n  } ,[])\n\n\n  // whenever fromcurrency or tocurrency changes do this\n\n  useEffect(() => {\n    if(fromCurrency != null && toCurrency != null){\n      fetch(`${url}?base=${fromCurrency}&symbols=${toCurrency}`)\n        .then(res => res.json())\n        .then(data => setexchangeRate(data.rates[toCurrency]))\n    }\n  }, [fromCurrency,toCurrency])\n\n  function fromAmountChange(e){\n    setamount(e.target.value)\n    setamountFromCurrency(true)\n  }\n\n  function toAmountChange(e){\n    setamount(e.target.value)\n    setamountFromCurrency(false)\n  }\n\n  const handleSwap = (e) => {\n    e.preventDefault()\n    settoCurrency(fromCurrency)\n    setfromCurrency(toCurrency)\n    setamountFromCurrency(amountToCurrency)\n    setamountToCurrency(amountFromCurrency)\n  }\n  let currentRate = `${parseFloat(fromAmount).toFixed(2)} ${fromCurrency} = ${parseFloat(toAmount).toFixed(2)} ${toCurrency}`\n  return (\n    //  need Fragment to run the code : <> and </>\n    <>\n    \n      <div className=\"container-1\"><h1> Currency Converter</h1></div>\n      <div className=\"container-2\">\n       <div className=\"text\"> <p><h2>Enter the amount to convert</h2></p></div>\n    <Currencybox \n    listcurrency = {listcurrency} \n    selectCurrency = {fromCurrency}\n    onChangeCurrency = {e => setfromCurrency(e.target.value)}\n    \n    onChangeAmount = {fromAmountChange}\n    amount = {fromAmount}\n    />\n    {/* <div className=\"equals\"><h2>  = </h2></div> */}\n    <div className='w-full my-2 py-2'><BsArrowUpDown onClick={handleSwap} className='equals text-white hover:text-gray-900 rounded-full h-12 w-12 bg-green-600 '/></div>\n    <Currencybox\n    listcurrency ={listcurrency}\n    selectCurrency= {toCurrency}\n    onChangeCurrency = {e => settoCurrency(e.target.value)}\n    onChangeAmount = {toAmountChange}\n    amount ={toAmount}\n    />\n    </div>\n    <p>\n                 {currentRate}\n            </p>\n    </>\n\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}